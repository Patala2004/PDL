Terminales = { boolean for function if input int output return string var void numero cadena id += = , ; ( ) { } + - && == }

NoTerminales = { S B D D1 D2 D3 D4 T H C L R R1 R2 O A A1 A2 A3 U U1 U2 F1 F2 Q }

Axioma = S

Producciones = {
S -> B S
S -> D S 
S -> lambda
B -> var T id C 
B -> if ( R ) U
B -> U
B -> for ( F1 ; R ; F2 ) { Q }
D -> function H id ( D1 ) { Q }
H -> T
H -> void
T -> boolean
T -> int
T -> string
C -> ; 
C -> L R ;
L -> += 
L -> =
R -> R1 R2
R1 -> ( R )
R1 -> id A 
R1 -> numero 
R1 -> cadena
R2 -> O R 
R2 -> lambda
O -> == 
O -> && 
O -> + 
O -> -
A -> ( A1 ) 
A -> lambda
A1 -> A2 
A1 -> lambda
A2 -> R A3
A3 -> , A2
A3 -> lambda
U -> input id ; 
U -> output R ; 
U -> return U2 ; 
U -> id U1
U1 -> L R ; 
U1 -> ( A1 ) ;
U2 -> R
U2 -> lambda
F1 -> var T id L R 
F1 -> id L R 
F1 -> lambda
F2 -> id L R 
F2 -> lambda
Q -> B Q 
Q -> lambda
D1 -> D2
D1 -> void
D2 -> D3 D4
D3 -> T id
D4 -> , D2
D4 -> lambda
}
